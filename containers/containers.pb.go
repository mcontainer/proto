// Code generated by protoc-gen-go. DO NOT EDIT.
// source: containers.proto

/*
Package containers is a generated protocol buffer package.

It is generated from these files:
	containers.proto

It has these top-level messages:
	ContainerInfo
	ContainerEvent
	Response
*/
package containers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerInfo struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ip      string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Network string `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	Service string `protobuf:"bytes,5,opt,name=service" json:"service,omitempty"`
	Stack   string `protobuf:"bytes,6,opt,name=stack" json:"stack,omitempty"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ContainerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ContainerInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ContainerInfo) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ContainerInfo) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

type ContainerEvent struct {
	IpSrc string `protobuf:"bytes,1,opt,name=ipSrc" json:"ipSrc,omitempty"`
	IpDst string `protobuf:"bytes,2,opt,name=ipDst" json:"ipDst,omitempty"`
	Stack string `protobuf:"bytes,3,opt,name=stack" json:"stack,omitempty"`
	Size  uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *ContainerEvent) Reset()                    { *m = ContainerEvent{} }
func (m *ContainerEvent) String() string            { return proto.CompactTextString(m) }
func (*ContainerEvent) ProtoMessage()               {}
func (*ContainerEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContainerEvent) GetIpSrc() string {
	if m != nil {
		return m.IpSrc
	}
	return ""
}

func (m *ContainerEvent) GetIpDst() string {
	if m != nil {
		return m.IpDst
	}
	return ""
}

func (m *ContainerEvent) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *ContainerEvent) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Response struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*ContainerInfo)(nil), "containers.ContainerInfo")
	proto.RegisterType((*ContainerEvent)(nil), "containers.ContainerEvent")
	proto.RegisterType((*Response)(nil), "containers.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContainerService service

type ContainerServiceClient interface {
	AddNode(ctx context.Context, in *ContainerInfo, opts ...grpc.CallOption) (*Response, error)
	StreamContainerEvents(ctx context.Context, opts ...grpc.CallOption) (ContainerService_StreamContainerEventsClient, error)
}

type containerServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerServiceClient(cc *grpc.ClientConn) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) AddNode(ctx context.Context, in *ContainerInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/containers.ContainerService/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) StreamContainerEvents(ctx context.Context, opts ...grpc.CallOption) (ContainerService_StreamContainerEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ContainerService_serviceDesc.Streams[0], c.cc, "/containers.ContainerService/StreamContainerEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerServiceStreamContainerEventsClient{stream}
	return x, nil
}

type ContainerService_StreamContainerEventsClient interface {
	Send(*ContainerEvent) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type containerServiceStreamContainerEventsClient struct {
	grpc.ClientStream
}

func (x *containerServiceStreamContainerEventsClient) Send(m *ContainerEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerServiceStreamContainerEventsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ContainerService service

type ContainerServiceServer interface {
	AddNode(context.Context, *ContainerInfo) (*Response, error)
	StreamContainerEvents(ContainerService_StreamContainerEventsServer) error
}

func RegisterContainerServiceServer(s *grpc.Server, srv ContainerServiceServer) {
	s.RegisterService(&_ContainerService_serviceDesc, srv)
}

func _ContainerService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containers.ContainerService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).AddNode(ctx, req.(*ContainerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_StreamContainerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).StreamContainerEvents(&containerServiceStreamContainerEventsServer{stream})
}

type ContainerService_StreamContainerEventsServer interface {
	Send(*Response) error
	Recv() (*ContainerEvent, error)
	grpc.ServerStream
}

type containerServiceStreamContainerEventsServer struct {
	grpc.ServerStream
}

func (x *containerServiceStreamContainerEventsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerServiceStreamContainerEventsServer) Recv() (*ContainerEvent, error) {
	m := new(ContainerEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ContainerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containers.ContainerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _ContainerService_AddNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamContainerEvents",
			Handler:       _ContainerService_StreamContainerEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "containers.proto",
}

func init() { proto.RegisterFile("containers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x4d, 0xff, 0x3b, 0xd0, 0x52, 0x42, 0x85, 0xd8, 0x93, 0x2c, 0x1e, 0x7a, 0x2a, 0xa2,
	0x57, 0x2f, 0xa2, 0x1e, 0xbc, 0x28, 0xec, 0x3e, 0xc1, 0x9a, 0x9d, 0x42, 0x28, 0x4d, 0x96, 0x4c,
	0xac, 0xe0, 0x3b, 0xf8, 0x10, 0xbe, 0xa9, 0xec, 0x24, 0xdb, 0x6e, 0x41, 0x6f, 0xf9, 0xbe, 0x6f,
	0xf8, 0xf2, 0xcb, 0x04, 0xe6, 0xda, 0xd9, 0x50, 0x1a, 0x8b, 0x9e, 0xd6, 0xb5, 0x77, 0xc1, 0x49,
	0x38, 0x3a, 0xd9, 0xb7, 0x80, 0xe9, 0x63, 0x2b, 0x5f, 0xec, 0xc6, 0xc9, 0x19, 0xf4, 0x4c, 0xa5,
	0xc4, 0x95, 0x58, 0x9d, 0xe7, 0x3d, 0x53, 0x49, 0x09, 0x03, 0x5b, 0xee, 0x50, 0xf5, 0xd8, 0xe1,
	0x33, 0xcf, 0xd4, 0xaa, 0x9f, 0x66, 0x6a, 0xa9, 0x60, 0x6c, 0x31, 0x7c, 0x3a, 0xbf, 0x55, 0x03,
	0x36, 0x5b, 0xd9, 0x24, 0x84, 0x7e, 0x6f, 0x34, 0xaa, 0x61, 0x4c, 0x92, 0x94, 0x0b, 0x18, 0x52,
	0x28, 0xf5, 0x56, 0x8d, 0xd8, 0x8f, 0x22, 0xdb, 0xc0, 0xec, 0x80, 0xf3, 0xbc, 0x47, 0x1b, 0x9a,
	0x39, 0x53, 0x17, 0x5e, 0x27, 0xa4, 0x28, 0xa2, 0xfb, 0x44, 0x21, 0x61, 0x45, 0x71, 0xec, 0xec,
	0x77, 0x3a, 0x9b, 0x17, 0x90, 0xf9, 0x42, 0x46, 0x9b, 0xe6, 0x7c, 0xce, 0xae, 0x61, 0x92, 0x23,
	0xd5, 0xce, 0x12, 0x32, 0xe3, 0x87, 0xd6, 0x48, 0xc4, 0x77, 0x4c, 0xf2, 0x56, 0xde, 0xfe, 0x08,
	0x98, 0x1f, 0x70, 0x8a, 0x04, 0x7e, 0x0f, 0xe3, 0x87, 0xaa, 0x7a, 0x75, 0x15, 0xca, 0xcb, 0x75,
	0x67, 0xb9, 0x27, 0x6b, 0x5c, 0x2e, 0xba, 0x51, 0x7b, 0x55, 0x76, 0x26, 0xdf, 0xe0, 0xa2, 0x08,
	0x1e, 0xcb, 0xdd, 0xe9, 0x33, 0x49, 0x2e, 0xff, 0xec, 0xe2, 0xf0, 0xbf, 0xb2, 0x95, 0xb8, 0x11,
	0xef, 0x23, 0xfe, 0xd4, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xb2, 0x85, 0xfb, 0xe8,
	0x01, 0x00, 0x00,
}
