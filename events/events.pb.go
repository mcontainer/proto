// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	Event
	EventSummary
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	IpSrc string `protobuf:"bytes,1,opt,name=ipSrc" json:"ipSrc,omitempty"`
	IpDst string `protobuf:"bytes,2,opt,name=ipDst" json:"ipDst,omitempty"`
	Stack string `protobuf:"bytes,3,opt,name=stack" json:"stack,omitempty"`
	Size  uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetIpSrc() string {
	if m != nil {
		return m.IpSrc
	}
	return ""
}

func (m *Event) GetIpDst() string {
	if m != nil {
		return m.IpDst
	}
	return ""
}

func (m *Event) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *Event) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type EventSummary struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *EventSummary) Reset()                    { *m = EventSummary{} }
func (m *EventSummary) String() string            { return proto.CompactTextString(m) }
func (*EventSummary) ProtoMessage()               {}
func (*EventSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventSummary) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterType((*EventSummary)(nil), "events.EventSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	PushEvent(ctx context.Context, opts ...grpc.CallOption) (EventService_PushEventClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) PushEvent(ctx context.Context, opts ...grpc.CallOption) (EventService_PushEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventService_serviceDesc.Streams[0], c.cc, "/events.EventService/PushEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServicePushEventClient{stream}
	return x, nil
}

type EventService_PushEventClient interface {
	Send(*Event) error
	Recv() (*EventSummary, error)
	grpc.ClientStream
}

type eventServicePushEventClient struct {
	grpc.ClientStream
}

func (x *eventServicePushEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServicePushEventClient) Recv() (*EventSummary, error) {
	m := new(EventSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventService service

type EventServiceServer interface {
	PushEvent(EventService_PushEventServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_PushEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).PushEvent(&eventServicePushEventServer{stream})
}

type EventService_PushEventServer interface {
	Send(*EventSummary) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventServicePushEventServer struct {
	grpc.ServerStream
}

func (x *eventServicePushEventServer) Send(m *EventSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServicePushEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushEvent",
			Handler:       _EventService_PushEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x62, 0xb9, 0x58,
	0x5d, 0x41, 0x2c, 0x21, 0x11, 0x2e, 0xd6, 0xcc, 0x82, 0xe0, 0xa2, 0x64, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0x08, 0x07, 0x22, 0xea, 0x52, 0x5c, 0x22, 0xc1, 0x04, 0x13, 0x75, 0x29, 0x06,
	0xab, 0x2d, 0x2e, 0x49, 0x4c, 0xce, 0x96, 0x60, 0x86, 0x88, 0x82, 0x39, 0x42, 0x42, 0x5c, 0x2c,
	0xc5, 0x99, 0x55, 0xa9, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x60, 0xb6, 0x92, 0x0a, 0x17,
	0x0f, 0xd8, 0xf8, 0xe0, 0xd2, 0xdc, 0xdc, 0xc4, 0xa2, 0x4a, 0x90, 0xce, 0xe4, 0xfc, 0xd2, 0xbc,
	0x12, 0xb0, 0x2d, 0xac, 0x41, 0x10, 0x8e, 0x91, 0x1b, 0x4c, 0x55, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xaa, 0x90, 0x19, 0x17, 0x67, 0x40, 0x69, 0x71, 0x06, 0xc4, 0x61, 0xbc, 0x7a, 0x50, 0x87, 0x83,
	0xb9, 0x52, 0x22, 0x28, 0x5c, 0xa8, 0xb9, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60,
	0xbf, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xed, 0x43, 0x4a, 0xcc, 0xeb, 0x00, 0x00, 0x00,
}
